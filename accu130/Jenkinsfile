pipeline {
    agent any
    environment {
        access_key = credentials('aws_access_key_id')
        secret_access_key = credentials('aws_secret_access_key')
    }
    
    stages {
        stage('Build') {
            steps {
                sh 'aws configure set aws_access_key_id ${access_key}'
                sh 'aws configure set aws_secret_access_key ${secret_access_key}'
                sh 'aws configure set default.region eu-central-1'
                sh 'aws configure set default.output json'
                
                script {
                    try {
                        sh 'aws ec2 create-key-pair --key-name MyKeyPairV2'
                    } catch (Exception e) {
                        echo 'key already exist'
                    }
                }
            
                script {
                    ami_id = sh (
                        script: 'aws ec2 describe-images --owners amazon --filters \'Name=name,Values=amzn2-ami-kernel-5.10-hvm-2.0.20220606.1-x86_64-gp2\' --query "Images[*].[ImageId]" --output text',
                        returnStdout: true
                    ).trim()
                    
                    println ami_id

                    vpc_id = sh (
                        script: 'aws ec2 describe-vpcs --query "Vpcs[*].[VpcId]" --output text | head -n1',
                        returnStdout: true
                    ).trim()
                    
                    println vpc_id
                    
                    sg_id = sh (
                        script: "aws ec2 describe-security-groups --filters Name=vpc-id,Values=\"${vpc_id}\" --query \"SecurityGroups[*].[GroupId]\" --output text | head -n1",
                        returnStdout: true
                    ).trim()
                    
                    println sg_id
                    
                    subnet_id = sh (
                        script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=\"${vpc_id}\" --query \"Subnets[*].[SubnetId]\" --output text | head -n1",
                        returnStdout: true
                    ).trim()
                    
                    println subnet_id
                    
                    instance_id = sh (
                        script: "aws ec2 run-instances --image-id \"${ami_id}\" --count 1 --instance-type t2.micro --key-name MyKeyPairV2 --security-group-ids \"${sg_id}\" --subnet-id \"${subnet_id}\" | jq -r | jq -r .Instances[].InstanceId",
                        returnStdout: true
                    ).trim()
                    
                    println instance_id
                }
                
            }

            post {
                success {
                    sh 'echo "Build: all fine"'
                }
                failure {
                    sh 'echo "Build: fail"'
                }
            }
        }

        stage('Configuring') {
            steps {
                sh "aws ec2 create-tags --resources \"${instance_id}\" --tags Key=Owner,Value=DaniilT"
                
                script {
                    allocation_id = sh (
                        script: "aws ec2 allocate-address | jq -r .AllocationId",
                        returnStdout: true
                    ).trim()
                    
                    println allocation_id
                    
                    sleep(time:30,unit:"SECONDS")
                    
                    association_id = sh (
                        script: "aws ec2 associate-address --instance-id \"${instance_id}\" --allocation-id \"${allocation_id}\" | jq -r .AssociationId",
                        returnStdout: true
                    ).trim()
                    
                    println association_id
                }

            }

            post {
                success {
                    sh 'echo "Configuring: all fine"'
                }

                failure {
                    sh 'echo "Configuring: fail"'
                }
            }
        }
            
        stage('Delete') {
            steps {
                sh "aws ec2 disassociate-address --association-id \"${association_id}\""
                sh "aws ec2 release-address --allocation-id \"${allocation_id}\""
                sh "aws ec2 terminate-instances --instance-ids \"${instance_id}\""
                sh "aws ec2 delete-tags --resources \"${instance_id}\" --tags Key=Owner"
            }

            post {
                success {
                    sh 'echo "Delete: all fine"'
                }

                failure {
                    sh 'echo "Delete: fail"'
                }
            }
        }
    }
} 
