pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_key_id')
        AWS_REGION = credentials('aws_region')
        // SSH_KEY_PATH = credentials('ssh_key')
        MYSQL_ROOT_PASS = credentials('mysql_root_password')
        MYSQL_DB_NAME = credentials('new_mysql_db_name')
        MYSQL_USER_NAME = credentials('new_mysql_user_name')
        MYSQL_USER_PASS = credentials('new_mysql_user_pass')
    }
    stages {
        stage('Terraform apply') {
            steps {
                script {
                    properties([
                        parameters([
                            choice(
                                choices: ['Django', 'Ruby on Rails'], 
                                description: 'Select app version', 
                                name: 'START_OPTION'
                            ),
                            choice(
                                choices: ['EC2', 'RDS'], 
                                description: 'Select db server type', 
                                name: 'DB_OPTION'
                            ),
                            choice(
                                choices: ['EC2', 'EKS'], 
                                description: 'Select app server type', 
                                name: 'APP_OPTION'
                            ),
                            choice(
                                choices: ['EC2', 'ELB'], 
                                description: 'Select lb server type (ONLY for EC2 app server!!!)', 
                                name: 'LB_OPTION'
                            )
                        ])
                    ])
                    
                    string SKIP_TAGS = ""

                    if (params.APP_OPTION == "EKS") {
                        SKIP_TAGS = "APP_ruby,APP_django"
                    } 
                    else {
                        if (params.START_OPTION == "Django") {
                            SKIP_TAGS = "APP_ruby"
                        } 
                        else {
                            SKIP_TAGS = "APP_django"
                        }
                    }

                    if (params.LB_OPTION != "EC2") {
                        SKIP_TAGS += ",LB"
                    } 

                    if (params.DB_OPTION != "EC2") {
                        SKIP_TAGS += ",DB"
                    } 
                }

                git branch: 'accu230', credentialsId: 'ssh_key_jenkins', url: 'git@github.com:TerebDan/DevOps-Trainee.git'
                
                sh 'mkdir -p temp'
                sh 'cp -ur accu201/accu230/* temp'

                dir('temp/vpc-module') {
                    // sh 'terraform init'
                    // sh 'terraform apply -auto-approve'
                    sh 'terraform output -json > vars.txt'
                    // sh 'terraform destroy -auto-approve'
                }

                script{
                    if (params.DB_OPTION == "EC2") {
                        dir('temp/ec2-db-module') {
                            sh 'echo "vpc_id=$(jq .vpc_id.value ../vpc-module/vars.txt)" > vars.tfvars'
                            sh 'echo "subnet_id=$(jq .vpc_public_subnets.value ../vpc-module/vars.txt | jq .[1])" >> vars.tfvars'
                            sh 'cat vars.tfvars'

                            // sh 'terraform init'
                            // sh "terraform apply -auto-approve -var-file=\"vars.tfvars\""
                            // sh 'terraform output -json > vars.txt'
                            // sh "terraform destroy -auto-approve -var-file=\"vars.tfvars\""
                        }
                    } 
                    else{
                        dir('temp/rds-module') {
                            sh 'echo "vpc_id=$(jq .vpc_id.value ../vpc-module/vars.txt)" > vars.tfvars'
                            sh 'echo "vpc_public_subnets=$(jq .vpc_public_subnets.value ../vpc-module/vars.txt)" >> vars.tfvars'
                            string TEMP = "mysql_pass=\"${MYSQL_USER_PASS}\""
                            sh "echo ${TEMP} >> vars.tfvars"
                            TEMP = "mysql_login=\"${MYSQL_USER_NAME}\""
                            sh "echo ${TEMP} >> vars.tfvars"
                            sh 'cat vars.tfvars'

                            // sh 'terraform init'
                            // sh "terraform apply -auto-approve -var-file=\"vars.tfvars\""
                            // sh 'terraform output -json > vars.txt'
                            // sh "terraform destroy -auto-approve -var-file=\"vars.tfvars\""
                        }
                    }

                    if (params.APP_OPTION == "EC2") {
                        dir('temp/ec2-app-module') {
                            sh 'echo "vpc_id=$(jq .vpc_id.value ../vpc-module/vars.txt)" > vars.tfvars'
                            sh 'echo "subnet_id=$(jq .vpc_public_subnets.value ../vpc-module/vars.txt | jq .[0])" >> vars.tfvars'
                            sh 'cat vars.tfvars'

                            sh 'terraform init'
                            sh "terraform apply -auto-approve -var-file=\"vars.tfvars\""
                            sh 'terraform output -json > vars.txt'
                            // sh "terraform destroy -auto-approve -var-file=\"vars.tfvars\""
                        }
                    } 
                    else{
                        dir('temp/eks-module') {
                            sh 'echo "vpc_id=$(jq .vpc_id.value ../vpc-module/vars.txt)" > vars.tfvars'
                            sh 'echo "vpc_private_subnets=$(jq .vpc_private_subnets.value ../vpc-module/vars.txt)" >> vars.tfvars'
                            sh 'cat vars.tfvars'

                            // sh 'terraform init'
                            // sh "terraform apply -auto-approve -var-file=\"vars.tfvars\""
                            // sh "terraform output -json > vars.txt"
                            // sh "terraform destroy -auto-approve -var-file=\"vars.tfvars\""
                        }
                    }

                    if (params.APP_OPTION == "EC2") {
                        if (params.LB_OPTION == "EC2") {
                            dir('temp/ec2-lb-module') {
                                sh 'echo "vpc_id=$(jq .vpc_id.value ../vpc-module/vars.txt)" > vars.tfvars'
                                sh 'echo "subnet_id=$(jq .vpc_public_subnets.value ../vpc-module/vars.txt | jq .[2])" >> vars.tfvars'
                                sh 'cat vars.tfvars'

                                // sh 'terraform init'
                                // sh "terraform apply -auto-approve -var-file=\"vars.tfvars\""
                                // sh 'terraform output -json > vars.txt'
                                // sh "terraform destroy -auto-approve -var-file=\"vars.tfvars\""
                            }
                        } 
                        else{
                            dir('temp/elb-module') {
                                sh 'echo "vpc_id=$(jq .vpc_id.value ../vpc-module/vars.txt)" > vars.tfvars'
                                sh 'echo "vpc_public_subnets=$(jq .vpc_public_subnets.value ../vpc-module/vars.txt)" >> vars.tfvars'
                                sh 'echo "instances_id=[\"$(jq .app_server_id.value ../ec2-app-module/vars.txt)\",]" >> vars.tfvars'
                                sh 'cat vars.tfvars'

                                // sh 'terraform init'
                                // sh "terraform apply -auto-approve -var-file=\"vars.tfvars\""
                                // sh "terraform output -json > vars.txt"
                                // sh "terraform destroy -auto-approve -var-file=\"vars.tfvars\""
                            }
                        }
                    }
                }
            }

            post {
                success {
                    sh 'echo "Terraform apply: all fine"'
                }
                failure {
                    sh 'echo "Terraform apply: fail"'
                }
            }
        }
        
        // stage('Build') {
        //     steps {
        //         dir('accu163') {
        //             sh "echo \"[DB_servers]\n${DB_DNS_NAME} ansible_user=ubuntu\n\n \
        //                 [APP_servers]\n${APP_DNS_NAME} ansible_user=ubuntu\n\n \
        //                 [LB_servers]\n${LB_DNS_NAME} ansible_user=ec2-user\n\n \
        //                 [Deploy:children]\nDB_servers\nAPP_servers\nLB_servers\n\n \
        //                 [Deploy:vars]\nansible_ssh_private_key_file=${SSH_KEY_PATH}\" > hosts"

        //             sh "ansible-playbook accu163.yml --skip-tags \"${SKIP_TAGS}\" --extra-vars \"django_app_ip_port=${APP_IP}:8000 \
        //                 db_server_ip=${DB_IP} mysql_root_password=${MYSQL_ROOT_PASS} new_mysql_db_name=${MYSQL_DB_NAME} \
        //                 new_mysql_user_name=${MYSQL_USER_NAME} new_mysql_user_pass=${MYSQL_USER_PASS}\""
        //         }
        //     }

        //     post {
        //         success {
        //             sh 'echo "Build: all fine"'
        //         }
        //         failure {
        //             sh 'echo "Build: fail"'
        //         }
        //     }
        // }
        
        // stage('Test the setup') {
        //     parallel {
                
        //         stage('Test LB server') {
        //             steps {
        //                 script {
        //                     sh(script: "nmap ${LB_IP} -p 80 | grep -o open", returnStdout: true)
        //                 }
        //             }
        //         }

        //         stage('Test DB server') {
        //             steps {
        //                 script {
        //                     sh(script: "nmap ${DB_IP} -p 3306 | grep -o open", returnStdout: true)
        //                 }
        //             }
        //         }

        //         stage('Test APP server') {
        //             steps {
        //                 script {
        //                     sh(script: "nmap ${APP_IP} -p 8000 | grep -o open", returnStdout: true)
        //                 }
        //             }
        //         }
        //     }
            
        //     post {
        //         failure {
        //             sh 'echo "Terraform destroy"'
        //             dir('temp') {
        //                 sh 'terraform destroy -auto-approve'
        //             }
        //         }
        //     }
        // }

        // stage('Test the application') {
        //     parallel {

        //         stage('Test index.html') {
        //             steps {
        //                 script {
        //                     string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME} \
        //                         -o /dev/null", returnStdout: true).trim()
                                    
        //                     if (status != "200") {
        //                         error("index.html error")
        //                     }
        //                 }
        //             }
        //         }

        //         stage('Test dbread') {
        //             steps {
        //                 script {
        //                     string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME}/dbread \
        //                         -o /dev/null", returnStdout: true).trim()
                                    
        //                     if (status != "200") {
        //                         error("dbread error")
        //                     }
        //                 }
        //             }
        //         }

        //         stage('Test appserver') {
        //             steps {
        //                 script {
        //                     string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME}/appserver \
        //                         -o /dev/null", returnStdout: true).trim()
                                    
        //                     if (status != "200") {
        //                         error("appserver error")
        //                     }
        //                 }
        //             }
        //         }

        //         stage('Test serverid') {
        //             steps {
        //                 script {
        //                     try {
        //                         string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME}/serverid \
        //                             -o /dev/null", returnStdout: true).trim()
                                        
        //                         if (status != "200") {
        //                             error("serverid error")
        //                         }
        //                     } catch (Exception e) {
        //                         echo 'Serverid fail'
        //                     }
        //                 }
        //             }
        //         }
        //     }
            
        //     post {
        //         failure {
        //             sh 'echo "Terraform destroy"'
        //             dir('temp') {
        //                 sh 'terraform destroy -auto-approve'
        //             }
        //         }
        //     }
        // }

        // stage('Terraform destroy') {
        //     steps {
        //         dir('temp') {
        //             sh 'terraform destroy -auto-approve'
        //         }
        //     }

        //     post {
        //         success {
        //             sh 'echo "Terraform destroy: all fine"'
        //         }
        //         failure {
        //             sh 'echo "Terraform destroy: fail"'
        //         }
        //     }
        // }
    }
}
